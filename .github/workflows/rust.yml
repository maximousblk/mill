name: Rust

on:
  workflow_dispatch:
    inputs:
      repo:
        description: Repository
        required: true
      ref:
        description: Branch or Tag
        required: false
        default: "main"
      bin:
        description: Binary Name
        required: true
      manifest_dir:
        description: Manifest Directory
        required: false
        default: "."
      toolchain:
        description: Rust Version
        required: false
        default: "stable"
      args:
        description: Build Options
        required: false
        default: "--locked"
      prep:
        description: Pre-Build Steps
        required: false
        default: 'echo "nothing to do"'
      preptargets:
        description: Targets for Pre-Build Steps
        required: false
      extra_artifacts:
        description: Extra Artifacts to Include
        required: false
        default: "README.md"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    # timeout-minutes: 60

    outputs:
      commit: ${{ steps.commit.outputs.hash }}

    defaults:
      run:
        shell: nu {0}

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm

          - target: x86_64-pc-windows-msvc
            os: windows-2025
          - target: aarch64-pc-windows-msvc
            os: windows-11-arm

          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-15

    steps:
      - name: Install Nushell
        uses: hustcer/setup-nu@v3.19
        with:
          version: "0.104.0"

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          repository: ${{ inputs.repo }}
          submodules: recursive
          fetch-depth: 2

      - name: Configure Git
        run: git config --global core.longpaths true

      - name: Setup Cargo Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ inputs.bin }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9
        continue-on-error: true

      - name: Install ouch
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: ouch

      - name: Get commit hash # For release notes
        id: commit
        run: $"hash=(git rev-parse --short HEAD)" | save -a $env.GITHUB_OUTPUT

      - name: Setup Rust (${{ inputs.toolchain }})
        env:
          TOOLCHAIN: ${{ inputs.toolchain }}
          TARGET: ${{ matrix.target }}
        run: |
          rustup toolchain install ${{ env.TOOLCHAIN }} --force-non-host
          rustup set profile default
          rustup default ${{ env.TOOLCHAIN }}
          rustup override set ${{ env.TOOLCHAIN }}
          rustup target add ${{ env.TARGET }} --toolchain ${{ env.TOOLCHAIN }}
          rustup show active-toolchain

          rustc -V
          cargo -V
          rustup -V

      - name: Pre-Build Steps
        id: prep
        if: contains(inputs.preptargets, matrix.target)
        run: ${{ inputs.prep }}

      - name: Install ${{ inputs.bin }}
        run: cargo install --target ${{ matrix.target }} --path ${{ inputs.manifest_dir }} --root ${{ github.workspace }}/${{ github.run_id }}_install_root/${{ inputs.bin }} --bin ${{ inputs.bin }} ${{ inputs.args }}

      - name: Create Release Bundle
        run: |
          cp -r ${{ inputs.extra_artifacts }} '${{ github.workspace }}/${{ github.run_id }}_install_root/${{ inputs.bin }}/'
          ouch compress --yes --slow '${{ github.workspace }}/${{ github.run_id }}_install_root/${{ inputs.bin }}/' '${{ inputs.bin }}-${{ matrix.target }}.tar.gz'
          ouch list '${{ inputs.bin }}-${{ matrix.target }}.tar.gz'

      - name: Upload Builds
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          include-hidden-files: true
          compression-level: 0
          name: build-${{ matrix.target }}
          path: ${{ inputs.bin }}-${{ matrix.target }}.tar.gz

  release:
    if: always()
    needs: build
    runs-on: ubuntu-24.04
    timeout-minutes: 10

    permissions:
      contents: write
      packages: write
      actions: write
      id-token: write
      attestations: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: release
          merge-multiple: true

      - name: Prep Release Notes
        working-directory: release
        run: |
          echo 'source: ${{ inputs.repo }}@${{ needs.build.outputs.commit }}' | tee ../notes.md
          echo -e '\n```sh\necho $hash $filename | sha1sum -c\n' | tee -a ../notes.md
          sha1sum $(ls) | tee -a ../notes.md
          echo '```' | tee -a ../notes.md

      - name: Generate Provenance Attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "release/*"

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ inputs.repo }}/${{ needs.build.outputs.commit }}
          name: ${{ inputs.bin }}@${{ inputs.ref }}
          makeLatest: true
          prerelease: false
          allowUpdates: true
          replacesArtifacts: true
          artifacts: "release/*"
          bodyFile: "notes.md"
          token: ${{ github.token }}
